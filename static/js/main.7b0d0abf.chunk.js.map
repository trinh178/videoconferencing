{"version":3,"sources":["logo.svg","VideoConferencing/Room.js","VideoConferencing/utils.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","participantConnected","participant","console","log","identity","div","document","createElement","id","sid","on","track","trackSubscribed","trackUnsubscribed","tracks","forEach","publication","isSubscribed","getElementById","appendChild","participantDisconnected","remove","attach","detach","element","Room","props","token","this","room","AccessToken","require","jwt","VideoGrant","accessToken","grant","addGrant","toJwt","Utils","Math","random","toString","substring","createLocalVideoTrack","then","connect","name","participants","once","error","message","React","Component","App","state","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,iSCoB3C,SAASC,EAAqBC,GAC1BC,QAAQC,IAAI,wBAAyBF,EAAYG,UAEjD,IAAMC,EAAMC,SAASC,cAAc,OACnCF,EAAIG,GAAKP,EAAYQ,IAErBR,EAAYS,GAAG,mBAAmB,SAAAC,GAAK,OAAIC,EAAgBP,EAAKM,MAChEV,EAAYS,GAAG,oBAAqBG,GAEpCZ,EAAYa,OAAOC,SAAQ,SAAAC,GACrBA,EAAYC,cACdL,EAAgBP,EAAKW,EAAYL,UAIrCL,SAASY,eAAe,QAAQC,YAAYd,GAG9C,SAASe,EAAwBnB,GAC/BC,QAAQC,IAAI,gCAAiCF,EAAYG,UACzDE,SAASY,eAAejB,EAAYQ,KAAKY,SAG3C,SAAST,EAAgBP,EAAKM,GAC5BN,EAAIc,YAAYR,EAAMW,UAGxB,SAAST,EAAkBF,GACzBA,EAAMY,SAASR,SAAQ,SAAAS,GAAO,OAAIA,EAAQH,Y,IAIzBI,E,kDACjB,WAAYC,GAAQ,uCACVA,G,qDAGN,OACI,yBAAKlB,GAAG,QACN,yBAAKA,GAAG,mB,0CAtDL,IAACmB,EA6DVC,KAAKD,MClEN,SAAwBvB,EAAUyB,GACrC,IAAIC,EAAcC,EAAQ,KAAUC,IAAIF,YACpCG,EAAaH,EAAYG,WAQzBC,EAAc,IAAIJ,EALJ,qCACA,qCACG,oCAUrBI,EAAY9B,SAAWA,EAGvB,IAAI+B,EAAQ,IAAIF,EAChBE,EAAMN,KAAOA,EACbK,EAAYE,SAASD,GAGrB,IAAIH,EAAME,EAAYG,QAEtB,OADAnC,QAAQC,IAAI,MAAO6B,GACZA,EDuCUM,CAAqBC,KAAKC,SAASC,SAAS,IAAIC,UAAU,GAAI,SAC3EC,kCAAwBC,MAAK,SAAAjC,GACCL,SAASY,eAAe,eAChCC,YAAYR,EAAMW,aAhE9BK,EAkEDC,KAAKD,MAjElBkB,kBAAQlB,EAAO,CAAEmB,KAAK,UAAWF,MAAK,SAAAf,GAElC3B,QAAQC,IAAI,yBAA0B0B,EAAKiB,MAE3CjB,EAAKkB,aAAahC,QAAQf,GAC1B6B,EAAKnB,GAAG,uBAAwBV,GAEhC6B,EAAKnB,GAAG,0BAA2BU,GACnCS,EAAKmB,KAAK,gBAAgB,SAAAC,GAAK,OAAIpB,EAAKkB,aAAahC,QAAQK,SAE5D,SAAA6B,GACD/C,QAAQ+C,MAAR,qCAA4CA,EAAMC,iB,GAmCxBC,IAAMC,WEnCzBC,E,kDAXb,WAAY3B,GAAQ,uCACZA,G,qDAIN,OADAxB,QAAQC,IAAI,QAASyB,KAAK0B,OAExB,kBAAC,EAAD,U,GAPYH,IAAMC,WCOJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxD,SAASY,eAAe,SDyHpB,kBAAmB6C,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnB,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.7b0d0abf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport * as Utils from './utils'\r\nimport { connect, createLocalVideoTrack } from 'twilio-video'\r\n\r\n//\r\nconst JoinRoom = (token) => {\r\n    connect(token, { name:'room1' }).then(room => {\r\n\r\n        console.log('Connected to Room \"%s\"', room.name);\r\n\r\n        room.participants.forEach(participantConnected);\r\n        room.on('participantConnected', participantConnected);\r\n      \r\n        room.on('participantDisconnected', participantDisconnected);\r\n        room.once('disconnected', error => room.participants.forEach(participantDisconnected));\r\n\r\n      }, error => {\r\n        console.error(`Unable to connect to Room: ${error.message}`);\r\n      });\r\n}\r\nfunction participantConnected(participant) {\r\n    console.log('Participant \"%s\" join', participant.identity);\r\n  \r\n    const div = document.createElement('div');\r\n    div.id = participant.sid;\r\n  \r\n    participant.on('trackSubscribed', track => trackSubscribed(div, track));\r\n    participant.on('trackUnsubscribed', trackUnsubscribed);\r\n  \r\n    participant.tracks.forEach(publication => {\r\n      if (publication.isSubscribed) {\r\n        trackSubscribed(div, publication.track);\r\n      }\r\n    });\r\n  \r\n    document.getElementById(\"room\").appendChild(div);\r\n  }\r\n  \r\n  function participantDisconnected(participant) {\r\n    console.log('Participant \"%s\" disconnected', participant.identity);\r\n    document.getElementById(participant.sid).remove();\r\n  }\r\n  \r\n  function trackSubscribed(div, track) {\r\n    div.appendChild(track.attach());\r\n  }\r\n  \r\n  function trackUnsubscribed(track) {\r\n    track.detach().forEach(element => element.remove());\r\n  }\r\n  //\r\n\r\nexport default class Room extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"room\">\r\n              <div id=\"local-media\">\r\n\r\n              </div>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        this.token = Utils.getAccessToken(Math.random().toString(36).substring(7), \"room1\")\r\n        createLocalVideoTrack().then(track => {\r\n          const localMediaContainer = document.getElementById('local-media');\r\n          localMediaContainer.appendChild(track.attach());\r\n        });\r\n        JoinRoom(this.token)\r\n    }\r\n}","export function getAccessToken(identity, room) {\r\n    var AccessToken = require('twilio').jwt.AccessToken;\r\n    var VideoGrant = AccessToken.VideoGrant;\r\n\r\n    // Substitute your Twilio AccountSid and ApiKey details\r\n    var ACCOUNT_SID = 'AC2037797c536e5d127ec76935135c42e5';\r\n    var API_KEY_SID = 'SK3caa2026baad9d9cb1bd3f15f4dd0a88';\r\n    var API_KEY_SECRET = 'NaRNb2GKSNnyjusJxJN2mkhpvROBESxc';\r\n\r\n    // Create an Access Token\r\n    var accessToken = new AccessToken(\r\n        ACCOUNT_SID,\r\n        API_KEY_SID,\r\n        API_KEY_SECRET\r\n    );\r\n\r\n    // Set the Identity of this token\r\n    accessToken.identity = identity;\r\n\r\n    // Grant access to Video\r\n    var grant = new VideoGrant();\r\n    grant.room = room;\r\n    accessToken.addGrant(grant);\r\n\r\n    // Serialize the token as a JWT\r\n    var jwt = accessToken.toJwt();\r\n    console.log('jwt', jwt);\r\n    return jwt;\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Room from './VideoConferencing/Room'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n  render() {\n    console.log('state', this.state)\n    return(\n      <Room />\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}